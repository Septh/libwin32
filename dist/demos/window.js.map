{"version":3,"file":"window.js","sourceRoot":"","sources":["../../source/demos/window.ts"],"names":[],"mappings":";AAAA,OAAO,EACH,UAAU,EAEb,MAAM,UAAU,CAAA;AACjB,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAA;AAC7C,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAA;AAEzC,MAAM,WAAW,GAAG,SAAS,CAAA;AAC7B,MAAM,UAAU,GAAI,eAAe,CAAA;AACnC,MAAM,QAAQ,GAAM,kCAAkC,CAAA;AAEtD,SAAS,OAAO,CAAC,IAAU,EAAE,KAAS,EAAE,MAAc,EAAE,MAAc;IAElE,IAAI,GAAW,CAAA;IACf,QAAQ,KAAK,EAAE,CAAC;QACZ;YACI,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACzB,GAAG,GAAG,CAAC,CAAA;YACP,MAAK;QAET;YACI,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;YACvD,MAAK;IACb,CAAC;IACD,oDAAoD;IACpD,OAAO,GAAG,CAAA;AACd,CAAC;AAED,SAAS,OAAO,CAAC,SAAoB,EAAE,QAAY;;;QAE/C,MAAM,IAAI,kCAAG,IAAI,UAAU,CAAC,OAAO,CAAC,QAAA,CAAA;QACpC,IAAI,CAAC,aAAa,GAAG,WAAW,CAAA;QAChC,IAAI,CAAC,KAAK,GAAW,uCAAuB,CAAA;QAC5C,IAAI,CAAC,SAAS,GAAO,SAAS,CAAA;QAC9B,IAAI,CAAC,OAAO,GAAS,MAAM,CAAC,UAAU,CAAC,IAAI,wBAAY,CAAA;QACvD,IAAI,CAAC,KAAK,GAAW,MAAM,CAAC,QAAQ,CAAC,SAAS,8BAAkB,CAAA;QAChE,IAAI,CAAC,OAAO,GAAS,MAAM,CAAC,QAAQ,CAAC,SAAS,8BAAkB,CAAA;QAChE,IAAI,CAAC,aAAa,GAAG,EAAS,CAAA;QAE9B,MAAM,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAA;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,iCAAiC,EAAE,QAAQ,EAAE,qCAAoB,CAAC,CAAA;YAC1F,OAAO,CAAC,CAAA;QACZ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,CAAC,YAAY,CAC5B,WAAW,EAAE,UAAU,EACvB,mDAAuB,kEACO,GAAG,EAAE,GAAG,EACtC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAC9B,CAAA;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,MAAM,GAAG,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAA;YACnC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,gCAAgC,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,qCAAoB,CAAC,CAAA;YAC5G,OAAO,CAAC,CAAC,CAAA;QACb,CAAC;QAED,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACjC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;QAEzB,oBAAoB;QACpB,MAAM,GAAG,GAAG,EAAS,CAAA;QACrB,OAAO,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACxC,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAA;YAC5B,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;QAC/B,CAAC;QAED,OAAO,CAAC,CAAA;;;;;;;;;CACX;AAED,QAAQ,CAAA;AACR,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAY,CAAA","sourcesContent":["import {\r\n    WNDCLASSEX, IDC, IDI, CS, WS, CW, WM, SW, MB,\r\n    type HINSTANCE, type WPARAM, type LPARAM, type HWND, type MSG\r\n} from 'libwin32'\r\nimport * as kernel32 from 'libwin32/kernel32'\r\nimport * as user32 from 'libwin32/user32'\r\n\r\nconst windowClass = \"NodeApp\"\r\nconst windowName  = \"Window Demo !\"\r\nconst appTitle    = \"A NodeJS app using the Win32 API\"\r\n\r\nfunction wndProc(hWnd: HWND, uMmsg: WM, wParam: WPARAM, lParam: LPARAM) {\r\n\r\n    let ret: number\r\n    switch (uMmsg) {\r\n        case WM.DESTROY:\r\n            user32.PostQuitMessage(0)\r\n            ret = 0\r\n            break\r\n\r\n        default:\r\n            ret = user32.DefWindowProc(hWnd, uMmsg, wParam, lParam)\r\n            break\r\n    }\r\n    // console.log(hWnd, { uMmsg, wParam, lParam }, ret)\r\n    return ret\r\n}\r\n\r\nfunction WinMain(hInstance: HINSTANCE, nCmdShow: SW): number {\r\n\r\n    using wcex = new WNDCLASSEX(wndProc)\r\n    wcex.lpszClassName = windowClass\r\n    wcex.style         = CS.HREDRAW | CS.VREDRAW\r\n    wcex.hInstance     = hInstance\r\n    wcex.hCursor       = user32.LoadCursor(null, IDC.ARROW)\r\n    wcex.hIcon         = user32.LoadIcon(hInstance, IDI.APPLICATION)\r\n    wcex.hIconSm       = user32.LoadIcon(hInstance, IDI.APPLICATION)\r\n    wcex.hbrBackground = 13 as any\r\n\r\n    const atom = user32.RegisterClassEx(wcex)\r\n    if (!atom) {\r\n        user32.MessageBox(null, \"Call to RegisterClassEx failed!\", appTitle, MB.OK | MB.ICONERROR)\r\n        return 1\r\n    }\r\n\r\n    const hWnd = user32.CreateWindow(\r\n        windowClass, windowName,\r\n        WS.CAPTION | WS.SYSMENU,\r\n        CW.USEDEFAULT, CW.USEDEFAULT, 600, 400,\r\n        null, null, hInstance, null\r\n    )\r\n    if (!hWnd) {\r\n        const err = kernel32.GetLastError()\r\n        user32.MessageBox(null, \"Call to CreateWindow failed!\\n\" + err.toString(16), appTitle, MB.OK | MB.ICONERROR)\r\n        return -1\r\n    }\r\n\r\n    user32.ShowWindow(hWnd, nCmdShow)\r\n    user32.UpdateWindow(hWnd)\r\n\r\n    // Main message loop\r\n    const msg = {} as MSG\r\n    while (user32.GetMessage(msg, null, 0, 0)) {\r\n        user32.TranslateMessage(msg)\r\n        user32.DispatchMessage(msg)\r\n    }\r\n\r\n    return 0\r\n}\r\n\r\ndebugger\r\nprocess.exitCode = WinMain(kernel32.GetModuleHandleW(null), SW.NORMAL)\r\n"]}
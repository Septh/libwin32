{"version":3,"file":"_functions.js","sourceRoot":"","sources":["../../../source/win32/user32/_functions.ts"],"names":[],"mappings":"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","sourcesContent":["import { koffi } from '../../private.js'\r\nimport { user32 } from './_alib.js'\r\nimport {\r\n    ctypes,\r\n    cVOID, cLPVOID, cBOOL, cINT, cUINT, cDWORD, cLPCWSTR,\r\n    cLPARAM, cWPARAM, cLRESULT, cATOM,\r\n    cHINSTANCE, type HINSTANCE\r\n} from '../../ctypes.js'\r\nimport {\r\n    cWNDCLASS, type WNDCLASS,\r\n    cWNDCLASSEX, type WNDCLASSEX,\r\n    cHWND, type HWND,\r\n    type WNDPROC\r\n} from './window.js'\r\nimport { cLPMSG, type MSG } from './msg.js'\r\nimport { cHICON, type HICON } from './icon.js'\r\nimport { cHCURSOR, type HCURSOR } from './cursor.js'\r\nimport { cHMENU, type HMENU } from './menu.js'\r\nimport type { IDC, IDI, IMAGE, LR, OBM, OCR, OIC, SW, WS, WS_EX } from './_consts.js'\r\n\r\n/**\r\n * Creates an overlapped, pop-up, or child window.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindoww\r\n */\r\nexport function CreateWindow(\r\n    lpClassName:  string | null,\r\n    lpWindowName: string | null,\r\n    dwStyle:      WS,\r\n    x:            number,\r\n    y:            number,\r\n    nWidth:       number,\r\n    nHeight:      number,\r\n    hWndParent:   HWND | null,\r\n    hMenu:        HMENU | null,\r\n    hInstance:    HINSTANCE | null,\r\n    lpParam:      any,\r\n): HWND {\r\n    return CreateWindowEx(0, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam)\r\n}\r\n\r\n/**\r\n * Creates an overlapped, pop-up, or child window with an extended window style.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-createwindowexw\r\n */\r\nexport const CreateWindowEx: koffi.KoffiFunc<(\r\n    dwExStyle:    WS_EX,\r\n    lpClassName:  string | null,\r\n    lpWindowName: string | null,\r\n    dwStyle:      WS,\r\n    x:            number,\r\n    y:            number,\r\n    nWidth:       number,\r\n    nHeight:      number,\r\n    hWndParent:   HWND | null,\r\n    hMenu:        HMENU | null,\r\n    hInstance:    HINSTANCE | null,\r\n    lpParam:      any,\r\n) => HWND> = user32.lib.func(\r\n    'CreateWindowExW', cHWND,\r\n    [ cDWORD, cLPCWSTR, cLPCWSTR, cDWORD, ctypes.int, ctypes.int, ctypes.int, ctypes.int, cHWND, cHMENU, cHINSTANCE, cLPVOID ]\r\n)\r\n\r\n/**\r\n * Calls the default window procedure to provide default processing for any window messages that an application does not process.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-defwindowprocw\r\n */\r\nexport const DefWindowProc: koffi.KoffiFunc<WNDPROC> = user32.lib.func('DefWindowProcW', cLRESULT, [ cHWND, cUINT, cWPARAM, cLPARAM ])\r\n\r\n/**\r\n * Destroys a cursor and frees any memory the cursor occupied.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroycursor\r\n */\r\nexport const DestroyCursor: koffi.KoffiFunc<(\r\n    hCursor: HCURSOR\r\n) => number> = user32.lib.func('DestroyCursor', cBOOL, [ cHCURSOR ])\r\n\r\n/**\r\n * Destroys an icon and frees any memory the cursor occupied.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-destroyicon\r\n */\r\nexport const DestroyIcon: koffi.KoffiFunc<(\r\n    hIcon: HICON\r\n) => number> = user32.lib.func('DestroyIcon', cBOOL, [ cHICON ])\r\n\r\n/**\r\n * Dispatches a message to a window procedure.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dispatchmessagew\r\n */\r\nexport const DispatchMessage: koffi.KoffiFunc<(\r\n    lpMsg: MSG\r\n) => number | BigInt> = user32.lib.func('DispatchMessageW', cLRESULT, [ cLPMSG ])\r\n\r\n/**\r\n * Retrieves a message from the calling thread's message queue.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getmessagew\r\n */\r\nexport const GetMessage: koffi.KoffiFunc<(\r\n    lpMsg:         MSG,\r\n    hWnd:          HWND | null | -1,\r\n    wMsgFilterMin: number,\r\n    wMsgFilterMax: number\r\n) => number> = user32.lib.func('GetMessageW', cBOOL, [ koffi.out(cLPMSG), cHWND, cUINT, cUINT ])\r\n\r\n/**\r\n * Loads the specified cursor resource from the executable (.exe) file associated with an application instance.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadcursorw\r\n */\r\nexport const LoadCursor: koffi.KoffiFunc<(\r\n    hInstance:  HINSTANCE | null,\r\n    lpIconName: IDC | string\r\n) => HCURSOR> = user32.lib.func('LoadCursorW', cHCURSOR, [ cHINSTANCE, cLPCWSTR ])\r\n\r\n/**\r\n * Loads the specified icon resource from the executable (.exe) file associated with an application instance.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadiconw\r\n */\r\nexport const LoadIcon: koffi.KoffiFunc<(\r\n    hInstance:  HINSTANCE | null,\r\n    lpIconName: IDI | string\r\n) => HICON> = user32.lib.func('LoadIconW', cHICON, [ cHINSTANCE, cLPCWSTR ])\r\n\r\n/**\r\n * Loads an icon, cursor, animated cursor, or bitmap.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagew\r\n */\r\nexport const LoadImage: koffi.KoffiFunc<(\r\n    hInstance: HINSTANCE | null,\r\n    lpName:    IDC | IDI | OIC | OCR | OBM | string,\r\n    type:      IMAGE,\r\n    cx:        number,\r\n    cy:        number,\r\n    fuLoad:    LR\r\n) => HICON> = user32.lib.func('LoadImageW', cHICON, [ cHINSTANCE, cLPCWSTR, cUINT, ctypes.int, ctypes.int, cUINT ])\r\n\r\n/**\r\n * Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messageboxw\r\n */\r\nexport const MessageBox: koffi.KoffiFunc<(\r\n    hWnd:      HWND | null,\r\n    lpText:    string | null,\r\n    lpCaption: string | null,\r\n    uType:     number\r\n) => number> = user32.lib.func('MessageBoxW', cINT, [ cHWND, cLPCWSTR, cLPCWSTR, cUINT ])\r\n\r\n/**\r\n * Indicates to the system that a thread has made a request to terminate (quit).\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postquitmessage\r\n */\r\nexport const PostQuitMessage: koffi.KoffiFunc<(\r\n    nExitCode: number\r\n) => void> = user32.lib.func('PostQuitMessage', cVOID, [ cINT ])\r\n\r\n/**\r\n * Registers a window class for subsequent use in calls to the CreateWindowEx function.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassexw\r\n */\r\nexport const RegisterClass: koffi.KoffiFunc<(\r\n    lpWndClass: WNDCLASS\r\n) => number> = user32.lib.func('RegisterClassW', cATOM, [ cWNDCLASS ])\r\n\r\n/**\r\n * Registers a window class for subsequent use in calls to the CreateWindowEx function.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerclassexw\r\n */\r\nexport const RegisterClassEx: koffi.KoffiFunc<(\r\n    lpWndClassEx: WNDCLASSEX\r\n) => number> = user32.lib.func('RegisterClassExW', cATOM, [ cWNDCLASSEX ])\r\n\r\n/**\r\n * Sets the specified window's show state.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow\r\n */\r\nexport const ShowWindow: koffi.KoffiFunc<(\r\n    hWnd:     HWND,\r\n    nCmdShow: SW\r\n) => boolean> = user32.lib.func('ShowWindow', cBOOL, [ cHWND, cINT ])\r\n\r\n/**\r\n * Sets the show state of a window without waiting for the operation to complete.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindowasync\r\n */\r\nexport const ShowWindowAsync: koffi.KoffiFunc<(\r\n    hWnd:     HWND,\r\n    nCmdShow: SW\r\n) => boolean> = user32.lib.func('ShowWindowAsync', cBOOL, [ cHWND, cINT ])\r\n\r\n/**\r\n * Translates virtual-key messages into character messages.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-translatemessage\r\n */\r\nexport const TranslateMessage: koffi.KoffiFunc<(\r\n    lpMsg: MSG\r\n) => number> = user32.lib.func('TranslateMessage', cBOOL, [ cLPMSG ])\r\n\r\n/**\r\n * Translates virtual-key messages into character messages.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/winmsg/translatemessageex\r\n */\r\nexport const TranslateMessageEx: koffi.KoffiFunc<(\r\n    lpMsg: MSG,\r\n    flags: number\r\n) => number> = user32.lib.func('TranslateMessageEx', cBOOL, [ cLPMSG, cUINT ])\r\n\r\n/**\r\n * Unregisters a window class, freeing the memory required for the class.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-unregisterclassw\r\n */\r\nexport const UnregisterClass: koffi.KoffiFunc<(\r\n    lpClassName: string,\r\n    hInstance:   HINSTANCE | null\r\n) => number> = user32.lib.func('UnregisterClassW', cATOM, [ cLPCWSTR, cHINSTANCE ])\r\n\r\n/**\r\n * Updates the client area of the specified window by sending a WM_PAINT message to the window if the window's update region is not empty.\r\n *\r\n * https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-updatewindow\r\n */\r\nexport const UpdateWindow: koffi.KoffiFunc<(\r\n    hWnd: HWND\r\n) => boolean> = user32.lib.func('UpdateWindow', cBOOL, [ cHWND ])\r\n"]}
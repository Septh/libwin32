{"version":3,"file":"private.js","sourceRoot":"","sources":["../source/private.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,aAAa,CAAA;AAEhC,OAAO,KAAK,MAAM,mBAAmB,CAAA;AACrC,OAAO,EAAE,KAAK,EAAE,CAAA;AAShB,MAAM,UAAU,IAAI,CAAC,IAAY;IAC7B,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC5B,MAAM,CAAC,GAAG,EAAE,kBAAkB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACtD,OAAO;QACH,IAAI;QACJ,GAAG;QACH,GAAG,EAAE,IAAI;QACT,OAAO,EAAE,IAAI;QAEb,yDAAyD;QACzD,CAAC,MAAM,CAAC,OAAO,CAAC;YACZ,GAAG,CAAC,MAAM,EAAE,CAAA;QAChB,CAAC;KACJ,CAAA;AACL,CAAC","sourcesContent":["import assert from 'node:assert'\r\n\r\nimport koffi from './stubs/koffi.cjs'\r\nexport { koffi }\r\n\r\nexport interface WinDll extends Disposable {\r\n    name: string\r\n    lib: koffi.IKoffiLib\r\n    x64: boolean\r\n    Unicode: boolean\r\n}\r\n\r\nexport function load(name: string): WinDll {\r\n    const lib = koffi.load(name)\r\n    assert(lib, `Could not load ${JSON.stringify(name)}.`)\r\n    return {\r\n        name,\r\n        lib,\r\n        x64: true,\r\n        Unicode: true,\r\n\r\n        // For use with `using` syntax (requires TypeScript 5.2+)\r\n        [Symbol.dispose]() {\r\n            lib.unload()\r\n        }\r\n    }\r\n}\r\n"]}
{"version":3,"file":"ctypes.js","sourceRoot":"","sources":["../source/ctypes.ts"],"names":[],"mappings":"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","sourcesContent":["import { koffi } from './private.js'\r\n\r\n/**\r\n * Koffi's builtin primitive C types (minus those with a space in their name, like `unsigned int` or `long long`).\r\n */\r\nexport const ctypes = koffi.types as Record<\r\n    | 'bool'\r\n    | 'char' | 'char16' | 'char16_t' | 'char32' | 'char32_t'\r\n    | 'double' | 'float' | 'float32' | 'float64'\r\n    | 'int'\r\n    | 'int16' | 'int16_be' | 'int16_be_t' | 'int16_le' | 'int16_le_t' | 'int16_t'\r\n    | 'int32' | 'int32_be' | 'int32_be_t' | 'int32_le' | 'int32_le_t' | 'int32_t'\r\n    | 'int64' | 'int64_be' | 'int64_be_t' | 'int64_le' | 'int64_le_t' | 'int64_t'\r\n    | 'int8'  | 'int8_t'   | 'intptr'     | 'intptr_t'\r\n    | 'short'\r\n    | 'long' | 'longlong'\r\n    // | 'long long'\r\n    | 'size_t'\r\n    | 'str' | 'str16' | 'str32'\r\n    | 'string' | 'string16' | 'string32'\r\n    | 'uchar'\r\n    | 'uint'\r\n    | 'uint16' | 'uint16_be' | 'uint16_be_t' | 'uint16_le' | 'uint16_le_t' | 'uint16_t'\r\n    | 'uint32' | 'uint32_be' | 'uint32_be_t' | 'uint32_le' | 'uint32_le_t' | 'uint32_t'\r\n    | 'uint64' | 'uint64_be' | 'uint64_be_t' | 'uint64_le' | 'uint64_le_t' | 'uint64_t'\r\n    | 'uint8'  | 'uint8_t'   | 'uintptr'     | 'uintptr_t'\r\n    | 'ulong' | 'ulonglong'\r\n    // | 'unsigned char'\r\n    // | 'unsigned int'\r\n    // | 'unsigned long'\r\n    // | 'unsigned long long'\r\n    // | 'unsigned short'\r\n    | 'ushort'\r\n    | 'void'\r\n    | 'wchar' | 'wchar_t'\r\n, koffi.IKoffiCType>\r\n\r\n/*\r\n * C `typedef`s used in the Windows API.\r\n * https://learn.microsoft.com/en-us/windows/win32/winprog/windows-data-types\r\n */\r\n\r\n// Primitives.\r\nexport const cVOID       = ctypes.void\r\nexport const cBOOL       = ctypes.int\r\nexport const cBOOLEAN    = ctypes.int8\r\nexport const cCHAR       = ctypes.char\r\nexport const cUCHAR      = ctypes.uchar\r\nexport const cCCHAR      = ctypes.char\r\nexport const cWCHAR      = ctypes.wchar\r\nexport const cBYTE       = ctypes.uint8\r\nexport const cWORD       = ctypes.uint16\r\nexport const cDWORD      = ctypes.uint32\r\nexport const cDWORD32    = ctypes.uint32\r\nexport const cDWORD64    = ctypes.uint64\r\nexport const cDWORDLONG  = ctypes.uint64\r\nexport const cQWORD      = ctypes.uint64\r\nexport const cINT        = ctypes.int\r\nexport const cUINT       = ctypes.uint\r\nexport const cINT8       = ctypes.int8\r\nexport const cUINT8      = ctypes.uint8\r\nexport const cINT16      = ctypes.int16\r\nexport const cUINT16     = ctypes.uint16\r\nexport const cINT32      = ctypes.int32\r\nexport const cUINT32     = ctypes.uint32\r\nexport const cINT64      = ctypes.int64\r\nexport const cUINT64     = ctypes.uint64\r\nexport const cINT_PTR    = ctypes.int64\r\nexport const cUINT_PTR   = ctypes.uint64\r\nexport const cSHORT      = ctypes.int16\r\nexport const cUSHORT     = ctypes.uint16\r\nexport const cLONG       = ctypes.int32\r\nexport const cULONG      = ctypes.uint32\r\nexport const cLONG32     = ctypes.int32\r\nexport const cULONG32    = ctypes.uint32\r\nexport const cLONG64     = ctypes.int64\r\nexport const cULONG64    = ctypes.uint64\r\nexport const cLONGLONG   = ctypes.int64\r\nexport const cULONGLONG  = ctypes.uint64\r\nexport const cLONG_PTR   = ctypes.int64\r\nexport const cULONG_PTR  = ctypes.uint64\r\nexport const cDWORD_PTR  = ctypes.int64\r\nexport const cPOINTER_32 = ctypes.int32\r\nexport const cPOINTER_64 = ctypes.int64\r\nexport const cFLOAT      = ctypes.float\r\nexport const cDOUBLE     = ctypes.double\r\nexport const cPSTR       = ctypes.str\r\nexport const cPWSTR      = ctypes.str16\r\nexport const cPTSTR      = ctypes.str16       // Always Unicode\r\nexport const cLPSTR      = ctypes.str\r\nexport const cLPWSTR     = ctypes.str16\r\nexport const cLPTSTR     = ctypes.str16       // Always Unicode\r\nexport const cPCSTR      = ctypes.str\r\nexport const cPCWSTR     = ctypes.str16\r\nexport const cPCTSTR     = ctypes.str16       // Always Unicode\r\nexport const cLPCSTR     = ctypes.str\r\nexport const cLPCWSTR    = ctypes.str16\r\nexport const cLPCTSTR    = ctypes.str16       // Always Unicode\r\n\r\n// Pointers.\r\n// Note: for better tree-shakeability, we define pointers to Koffi's primitives, not ours.\r\nexport const cPVOID      = koffi.pointer('PVOID',       ctypes.void)\r\nexport const cLPVOID     = koffi.pointer('LPVOID',      ctypes.void)\r\nexport const cLPCVOID    = koffi.pointer('LPCVOID',     ctypes.void)\r\nexport const cPBOOL      = koffi.pointer('PBOOL',       ctypes.int)\r\nexport const cLPBOOL     = koffi.pointer('LPBOOL',      ctypes.int)\r\nexport const cPBOOLEAN   = koffi.pointer('PBOOLEAN',    ctypes.int8)\r\nexport const cLPBOOLEAN  = koffi.pointer('LPBOOLEAN',   ctypes.int8)\r\nexport const cPCHAR      = koffi.pointer('PCHAR',       ctypes.char)\r\nexport const cPUCHAR     = koffi.pointer('PUCHAR',      ctypes.uchar)\r\nexport const cPBYTE      = koffi.pointer('PBYTE',       ctypes.uint8)\r\nexport const cLPBYTE     = koffi.pointer('LPBYTE',      ctypes.uint8)\r\nexport const cPWORD      = koffi.pointer('PWORD',       ctypes.uint16)\r\nexport const cLPWORD     = koffi.pointer('LPWORD',      ctypes.uint16)\r\nexport const cPDWORD     = koffi.pointer('PDWORD',      ctypes.uint32)\r\nexport const cLPDWORD    = koffi.pointer('LPDWORD',     ctypes.uint32)\r\nexport const cPDWORD32   = koffi.pointer('PDWORD32',    ctypes.uint32)\r\nexport const cPDWORD64   = koffi.pointer('PDWORD64',    ctypes.uint64)\r\nexport const cPDWORDLONG = koffi.pointer('PDWORDLONG',  ctypes.uint64)\r\nexport const cPQWORD     = koffi.pointer('PQWORD',      ctypes.uint64)\r\nexport const cPINT       = koffi.pointer('PINT',        ctypes.int)\r\nexport const cLPINT      = koffi.pointer('LPINT',       ctypes.int)\r\nexport const cPUINT      = koffi.pointer('PUINT',       ctypes.uint)\r\nexport const cPINT8      = koffi.pointer('PINT8',       ctypes.int8)\r\nexport const cPUINT8     = koffi.pointer('PUINT8',      ctypes.uint8)\r\nexport const cPINT16     = koffi.pointer('PINT16',      ctypes.int16)\r\nexport const cPUINT16    = koffi.pointer('PUINT16',     ctypes.uint16)\r\nexport const cPINT32     = koffi.pointer('PINT32',      ctypes.int32)\r\nexport const cPUINT32    = koffi.pointer('PUINT32',     ctypes.uint32)\r\nexport const cPINT64     = koffi.pointer('PINT64',      ctypes.int64)\r\nexport const cPUINT64    = koffi.pointer('PUINT64',     ctypes.uint64)\r\nexport const cPINT_PTR   = koffi.pointer('PINT_PTR',    ctypes.int64)\r\nexport const cPUINT_PTR  = koffi.pointer('PUINT_PTR',   ctypes.uint64)\r\nexport const cPSHORT     = koffi.pointer('PSHORT',      ctypes.int16)\r\nexport const cPUSHORT    = koffi.pointer('PUSHORT',     ctypes.uint16)\r\nexport const cPLONG      = koffi.pointer('PLONG',       ctypes.int32)\r\nexport const cLPLONG     = koffi.pointer('LPLONG',      ctypes.int32)\r\nexport const cPULONG     = koffi.pointer('PULONG',      ctypes.uint32)\r\nexport const cLPULONG    = koffi.pointer('LPULONG',     ctypes.uint32)\r\nexport const cPLONG32    = koffi.pointer('PLONG32',     ctypes.int32)\r\nexport const cPULONG32   = koffi.pointer('PULONG32',    ctypes.uint32)\r\nexport const cPLONG64    = koffi.pointer('PLONG64',     ctypes.int64)\r\nexport const cPULONG64   = koffi.pointer('PULONG64',    ctypes.uint64)\r\nexport const cPLONGLONG  = koffi.pointer('PLONGLONG',   ctypes.int64)\r\nexport const cPULONGLONG = koffi.pointer('PULONGLONG',  ctypes.uint64)\r\nexport const cPLONG_PTR  = koffi.pointer('PLONG_PTR',   ctypes.int64)\r\nexport const cPULONG_PTR = koffi.pointer('PULONG_PTR',  ctypes.uint64)\r\nexport const cPFLOAT     = koffi.pointer('PFLOAT',      ctypes.float)\r\nexport const cPDOUBLE    = koffi.pointer('PDOUBLE',     ctypes.double)\r\n\r\n// Apis.\r\nexport const cHANDLE     = koffi.pointer('HANDLE',   koffi.opaque('__handle__'))\r\nexport const cPHANDLE    = koffi.pointer('PHANDLE',  cHANDLE)\r\nexport const cLPHANDLE   = koffi.pointer('LPHANDLE', cHANDLE)\r\nexport const cHINSTANCE  = koffi.alias('HINSTANCE',  cHANDLE)\r\nexport const cWPARAM     = ctypes.uint64    // = UINT_PTR\r\nexport const cLPARAM     = ctypes.int64     // = LONG_PTR\r\nexport const cHRESULT    = ctypes.long      // = LONG\r\nexport const cLRESULT    = ctypes.int64     // = LONG_PTR\r\nexport const cATOM       = ctypes.uint16    // = WORD\r\n\r\n/*\r\n * TypeScript base types.\r\n */\r\nexport type HANDLE<Kind extends string> = koffi.IKoffiCType & { __kind: Kind }\r\nexport type HINSTANCE = HANDLE<'HINSTANCE'>\r\nexport type WPARAM    = number | HANDLE<any>\r\nexport type LPARAM    = number | BigInt | HANDLE<any>\r\nexport type HRESULT   = number | HANDLE<any>\r\nexport type LRESULT   = number | BigInt | HANDLE<any>\r\n\r\n// export const cCOLORREF   = koffi.alias('COLORREF',      ctypes.uint32)\r\n// export const cLPCOLORREF = koffi.pointer('LPCOLORREF',  cCOLORREF)\r\n// export type HACCEL      = HANDLE<'HACCEL'>\r\n// export type HBITMAP     = HANDLE<'HBITMAP'>\r\n// export type HCOLORSPACE = HANDLE<'HCOLORSPACE'>\r\n// export type HDC         = HANDLE<'HDC'>\r\n// export type HDESK       = HANDLE<'HDESK'>\r\n// export type HDWP        = HANDLE<'HDWP'>\r\n// export type HFILE       = HANDLE<'HFILE'>\r\n// export type HFONT       = HANDLE<'HFONT'>\r\n// export type HGDIOBJ     = HANDLE<'HGDIOBJ'>\r\n// export type HGLOBAL     = HANDLE<'HGLOBAL'>\r\n// export type HHOOK       = HANDLE<'HHOOK'>\r\n// export type HKEY        = HANDLE<'HKEY'>\r\n// export type HKL         = HANDLE<'HKL'>\r\n// export type HLOCAL      = HANDLE<'HLOCAL'>\r\n// export type HMETAFILE   = HANDLE<'HMETAFILE'>\r\n// export type HMONITOR    = HANDLE<'HMONITOR'>\r\n// export type HPALETTE    = HANDLE<'HPALETTE'>\r\n// export type HPEN        = HANDLE<'HPEN'>\r\n// export type HRGN        = HANDLE<'HRGN'>\r\n// export type HRSRC       = HANDLE<'HRSRC'>\r\n// export type HWINSTA     = HANDLE<'HWINSTA'>\r\n"]}
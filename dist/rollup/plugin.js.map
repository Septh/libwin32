{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../source/rollup/plugin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,cAAc,CAAA;AAC7C,OAAO,EAAE,MAAM,kBAAkB,CAAA;AACjC,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAA;AAGxC,MAAM,UAAU,KAAK;IAEjB,kCAAkC;IAClC,MAAM,SAAS,GAAG,aAAa,CAAC,IAAI,GAAG,CACnC,iBAAiB,QAAQ,IAAI,IAAI,aAAa,EAC9C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAE,sCAAsC;KACvE,CAAC,CAAA;IAEF,8BAA8B;IAC9B,MAAM,QAAQ,GAAG,SAAS,QAAQ,IAAI,IAAI,OAAO,CAAA;IAEjD,MAAM,OAAO,GAAG,SAAS,CAAA;IACzB,IAAI,KAAK,GAAkB,IAAI,CAAA;IAE/B,OAAO;QACH,IAAI,EAAE,OAAO;QAEb,KAAK,CAAC,UAAU;YAEZ,4CAA4C;YAC5C,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,GAA0B,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA;YACvG,IAAI,MAAM,YAAY,KAAK,EAAE,CAAC;gBAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;YACvF,CAAC;YAED,KAAK,GAAG,IAAI,CAAA;QAChB,CAAC;QAED,SAAS,CAAC,EAAE;YACR,qFAAqF;YACrF,OAAO,uBAAuB,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnC,CAAC,CAAC,OAAO;gBACT,CAAC,CAAC,IAAI,CAAA;QACd,CAAC;QAED,IAAI,CAAC,EAAE;YACH,IAAI,EAAE,KAAK,OAAO,EAAE,CAAC;gBAEjB,0FAA0F;gBAC1F,6DAA6D;gBAC7D,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;oBAClB,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,QAAQ;oBACd,kBAAkB,EAAE,IAAI;iBAC3B,CAAC,CAAA;gBAEF,OAAO;oBACH,8CAA8C;oBAC9C,iDAAiD;oBACjD,sDAAsD,KAAK,GAAG;iBACjE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAChB,CAAC;YACD,OAAO,IAAI,CAAA;QACf,CAAC;QAED,KAAK,CAAC,WAAW;YACb,IAAI,KAAK,EAAE,CAAC;gBACR,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAA;gBACxD,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;gBACjC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;oBACvB,IAAI,CAAC,IAAI,CAAC;wBACN,gGAAgG;wBAChG,qGAAqG;qBACxG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;gBACjB,CAAC;YACL,CAAC;QACL,CAAC;QAED,cAAc,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE;YACpC,OAAO,WAAW,KAAK,KAAK;gBACxB,CAAC,CAAC,MAAM,QAAQ,GAAG;gBACnB,CAAC,CAAC,IAAI,CAAA;QACd,CAAC;KACJ,CAAA;AACL,CAAC","sourcesContent":["import { platform, arch } from 'node:process'\r\nimport fs from 'node:fs/promises'\r\nimport { fileURLToPath } from 'node:url'\r\nimport type { Plugin } from 'rollup'\r\n\r\nexport function koffi(): Plugin {\r\n\r\n    // The path to Koffi's .node file.\r\n    const koffiPath = fileURLToPath(new URL(\r\n        `./build/koffi/${platform}_${arch}/koffi.node`,\r\n        import.meta.resolve('koffi')  // Unflagged in Node v20.6.0, v18.19.0\r\n    ))\r\n\r\n    // The path we'll write it to.\r\n    const destFile = `koffi-${platform}-${arch}.node`\r\n\r\n    const VIRTUAL = '\\0:STUB'\r\n    let asset: string | null = null\r\n\r\n    return {\r\n        name: 'koffi',\r\n\r\n        async buildStart() {\r\n\r\n            // Make sure Koffi's present and accessible.\r\n            const access = await fs.access(koffiPath, fs.constants.R_OK).catch((err: NodeJS.ErrnoException) => err)\r\n            if (access instanceof Error) {\r\n                return this.error({ message: \"Koffi not found!\", cause: access, stack: undefined })\r\n            }\r\n\r\n            asset = null\r\n        },\r\n\r\n        resolveId(id) {\r\n            // Replace our stub import in private.ts (\"./stubs/koffi.cjs\") with some custom code.\r\n            return /stubs\\/koffi\\.c[jt]s$/.test(id)\r\n                ? VIRTUAL\r\n                : null\r\n        },\r\n\r\n        load(id) {\r\n            if (id === VIRTUAL) {\r\n\r\n                // Emit Koffi's C code as an asset. This allows us to respect the `assetFileNames` option.\r\n                // Don't load it right now, though: the file is big (2,33Mb).\r\n                asset = this.emitFile({\r\n                    type: 'asset',\r\n                    name: destFile,\r\n                    needsCodeReference: true\r\n                })\r\n\r\n                return [\r\n                    `import { createRequire } from 'node:module';`,\r\n                    `const require = createRequire(import.meta.url);`,\r\n                    `export default require(import.meta.ROLLUP_FILE_URL_${asset})`,\r\n                ].join('\\n')\r\n            }\r\n            return null\r\n        },\r\n\r\n        async renderStart() {\r\n            if (asset) {\r\n                this.setAssetSource(asset, await fs.readFile(koffiPath))\r\n                const n = this.getFileName(asset)\r\n                if (!n.endsWith('.node')) {\r\n                    this.warn([\r\n                        \"Invalid extension for Koffi's native code file, your bundle will most likely crash at runtime.\",\r\n                        \"Please check `assetFileNames` in rollup.config and make sure it ends with the `.[ext]` placeholder.\"\r\n                    ].join('\\n'))\r\n                }\r\n            }\r\n        },\r\n\r\n        resolveFileUrl({ referenceId, fileName }) {\r\n            return referenceId === asset\r\n                ? `\"./${fileName}\"`\r\n                : null\r\n        }\r\n    }\r\n}\r\n"]}